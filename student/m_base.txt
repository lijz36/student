'''
    Python基础计算函数模块
'''
import time
import math


def F_Fac(n):
    '''返回ｎ的阶乘'''
    if n == 1:
        return 1
    return n * F_Fac(n - 1)


def F_FacSum(n):
    '''返回ｎ的阶乘的和'''
    return sum(map(F_Fac, range(1, n)))


def F_CurTime():
    '''返回当前日期格式字符串'''
    t = time.localtime()
    return str(t[0]) + "-" + str(t[1]) + "-" + str(t[2]) + \
        " " + str(t[3]) + ":" + str(t[4]) + ":" + str(t[5])


def F_SquerySum(n, y=2):
    '''返回n以内所有数的y次方的总和'''
    return sum(map(lambda x: x ** y, range(1, n)))


def F_IsPrimes(n):
    '''返回ｎ是否为素数'''
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True


def F_PrimeSum(n):
    '''返回ｎ以内所有素数的总和'''
    return sum(filter(F_IsPrimes, range(1, n)))


def F_RecursionSum(start, end):
    '''用递归方法实现开始和结束整总和'''
    if start == end:
        return end
    return start + F_RecursionSum(start + 1, end)


def F_ZhiYinShu(n):
    '''求一个数的质因数并打印'''
    for x in range(2,int(n/2+1)):
        if n % x == 0:
            print(x,"*",end='')
            return F_ZhiYinShu(n/x)
    print(int(n))


def F_YieldRange(start, stop=None, step=1):
    '''生成器函数实现range功能'''
    if stop == None:
        stop = start
        start = 0
    if step >= 1:
        while start < stop:
            yield start
            start += step
    elif step <= -1:
        while start > stop:
            yield start
            start += step
 
           
def F_Split(strs,ch=' '):
    L = []
    s = 0
    e = 0
    f = False
    for x in range(len(strs)):
        if not f:
            if strs[x] != ch:
                s = x
                f = True
        else:
            if strs[x] == ch:
                e = x
                f = False
                L.append(strs[s:e])
        if f and x == len(strs)-1:
            L.append(strs[s:len(strs)])
    return L
            

def F_Fibonacci_Num(n):
    '''生成n个斐波那契数列表'''
    _L = []
    def fibonacci(m):
        if m == 0 :
            return 0
        elif m == 1 :
            return 1
        else :
            return fibonacci(m-1) + fibonacci(m-2)
    for x in range(n):
        _L.append(fibonacci(x))
    return _L


def F_Fibonacci_Max(n):
    '''生成n以内的斐波那契数列表'''
    _L = []
    count = 0
    def fib(m):
        if m == 0 :
            return 0
        elif m == 1 :
            return 1
        else :
            return fib(m-1) + fib(m-2)
    while True:
        if fib(count) >= n:
            break
        _L.append(fib(count))
        count += 1
    return _L


def F_Apple(x, m):
    '''计算苹果落地算法谈高算法'''
    h = 0.0
    def apple(c,n):
        c += 1
        if c == 10:
            nonlocal h
            h = n / 2
            return n / 2 * 3
        return n/2*3 + apple(c, n/2)
    return apple(x, m),h


def F_CurTims(sec):
    '''根据一天中的秒数获取当前时间'''
    hour = sec // (60 * 60)
    minute = sec % (60 * 60) // 60
    second = sec % 60
    print("%d时%d分%d秒" % (hour,minute,second))
    

def F_MinMax(x, y, z):
    '''判断三个数获取最大值和最小值,返回元组'''
    # 方法1
    max = y if y > x else x
    max = max if z < max else z
 
    min = y if x > y else x
    min = z if z < min else min
    
    # 方法2
#     max = 0; min = 0
#     if x > y:
#         max,min = x,y
#     else:
#         max,min = y,x
#      
#     if z > max:
#         max = z
#     elif z < min:
#         min = z
    
    return (min, max)


def F_IsRunNian(year):
    '''计算某一年是否为闰年'''
    if year % 400 == 0:
        return True
    if (year % 100 != 0) and (year % 4 == 0):
        return True
    else:
        return False
    
def F_Multiple(num, m):
    '''用位移计算某一个数的倍数'''
    def mul(m):
        if m % 2 > 2:
            return mul(m%2) 
        else:
            return 0
    n = mul(m)
    result = (num << n) + num *(m - 2**n)
    return result 

      





 
